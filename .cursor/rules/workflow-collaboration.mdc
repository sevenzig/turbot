---
description: 
globs: 
alwaysApply: false
---
# Workflow & Collaboration Rules

## Rule Intent
Standardize development workflow, documentation practices, and deployment processes to ensure smooth team collaboration and project maintenance.

## Trigger Conditions
- Git commit operations
- Pull request creation
- Documentation file creation/updates
- Deployment configuration changes
- Branch creation or merging

## Expected Behavior

### Git Workflow Standards

#### Branch Naming Convention
Use consistent branch naming patterns:

```bash
# Feature branches
feat/hero-section-redesign
feat/contact-form-validation
feat/seo-meta-tags

# Bug fixes
fix/mobile-navigation-issue
fix/contact-form-submission
fix/header-responsive-layout

# Documentation updates
docs/update-readme
docs/api-documentation
docs/deployment-guide

# Refactoring
refactor/component-structure
refactor/css-variables
refactor/business-data-integration

# Testing
test/component-unit-tests
test/accessibility-compliance
test/performance-optimization
```

#### Commit Message Standards
Follow Conventional Commits specification:

```bash
# Feature commits
feat(components): add reservation form component
feat(seo): implement schema markup for local business
feat(accessibility): add keyboard navigation support

# Bug fix commits
fix(header): resolve mobile navigation toggle issue
fix(contact): correct form validation error messages
fix(footer): fix social media link accessibility

# Documentation commits
docs(readme): update setup instructions
docs(api): add business data integration guide
docs(deployment): update Vercel configuration steps

# Style commits
style(css): format component stylesheets
style(components): organize import statements
style(global): update design token naming

# Refactor commits
refactor(business-data): consolidate data access patterns
refactor(components): extract reusable UI components
refactor(utilities): optimize helper functions

# Test commits
test(components): add unit tests for hero section
test(accessibility): add keyboard navigation tests
test(integration): add business data validation tests

# Chore commits
chore(deps): update React and TypeScript versions
chore(config): update ESLint configuration
chore(build): optimize Vite build process
```

#### Pull Request Template
Enforce consistent PR structure:

```markdown
## Description
Brief description of changes made and why.

## Type of Change
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] Documentation update
- [ ] Style/formatting change
- [ ] Refactor (code change that neither fixes a bug nor adds a feature)
- [ ] Performance improvement
- [ ] Test addition or update

## Business Context
- [ ] Changes use business data from `businessInfo.ts`
- [ ] Content follows brand voice guidelines
- [ ] SEO considerations addressed
- [ ] Accessibility requirements met
- [ ] Mobile responsiveness tested

## Testing
- [ ] Unit tests added/updated
- [ ] Integration tests pass
- [ ] Accessibility tests pass
- [ ] Manual testing completed
- [ ] Cross-browser testing completed

## Checklist
- [ ] Code follows project style guidelines
- [ ] Self-review of code completed
- [ ] Code is properly commented
- [ ] Documentation updated (if needed)
- [ ] No lint errors or warnings
- [ ] Build passes without errors
- [ ] All tests pass

## Screenshots (if applicable)
Add screenshots to help explain your changes.

## Additional Notes
Any additional information about the implementation.
```

### Documentation Standards

#### README Maintenance
Keep project documentation up-to-date:

```markdown
# Business Website Template

## Quick Start
1. Run setup wizard: `npm run init`
2. Configure business data in generated files
3. Start development: `npm run dev`

## Business Data Configuration
All business information is managed through:
- `src/data/businessInfo.ts` (generated by setup)
- `init-config.json` (optional configuration file)

## Available Scripts
- `npm run dev` - Start development server
- `npm run build` - Build for production
- `npm run preview` - Preview production build
- `npm run test` - Run unit tests
- `npm run test:coverage` - Run tests with coverage
- `npm run lint` - Run ESLint
- `npm run typecheck` - Run TypeScript checks

## Project Structure
```
src/
├── components/          # Reusable UI components
├── pages/              # Page-level components
├── data/               # Business data (businessInfo.ts)
├── styles/             # Global styles and design tokens
├── utils/              # Utility functions
└── types/              # TypeScript type definitions
```

## Deployment
See [DEPLOYMENT.md](mdc:DEPLOYMENT.md) for deployment instructions.
```

#### Component Documentation
Document component APIs and usage:

```typescript
/**
 * ContactForm - Business contact form component
 * 
 * Automatically configures fields based on business type and data from businessInfo.ts
 * Includes accessibility features and form validation.
 * 
 * @example
 * ```tsx
 * <ContactForm
 *   onSubmit={handleFormSubmit}
 *   showBusinessHours={true}
 *   includeSocialLinks={true}
 * />
 * ```
 */
interface ContactFormProps {
  /** Callback fired when form is submitted with valid data */
  onSubmit: (data: ContactFormData) => void;
  /** Whether to display business hours information */
  showBusinessHours?: boolean;
  /** Whether to include social media links */
  includeSocialLinks?: boolean;
  /** Additional CSS classes to apply */
  className?: string;
}

const ContactForm: React.FC<ContactFormProps> = ({
  onSubmit,
  showBusinessHours = false,
  includeSocialLinks = false,
  className
}) => {
  // Implementation
};
```

#### API Documentation
Document data structures and utilities:

```typescript
/**
 * Business Information Types
 * 
 * Generated from init-config.json during setup process
 */

/**
 * Main business information interface
 * Contains all business data used throughout the application
 */
interface BusinessInfo {
  /** Full business name */
  name: string;
  /** Abbreviated business name for headers/logos */
  shortName: string;
  /** Business tagline or slogan */
  tagline: string;
  /** Full business description */
  description: string;
  /** Short description for cards and previews */
  shortDescription: string;
  /** Business address information */
  address: BusinessAddress;
  /** Contact information */
  contact: ContactInfo;
  /** Social media links */
  social: SocialLinks;
  /** Website information */
  website: WebsiteInfo;
  /** Business operating hours */
  hours: BusinessHours;
  /** Key business features/differentiators */
  features: string[];
  /** Services offered by the business */
  services: string[];
}

/**
 * SEO utilities for business websites
 */

/**
 * Generate SEO metadata for pages
 * @param pageTitle - Optional page title (defaults to business name)
 * @returns SEO metadata object
 */
export function generateSEOData(pageTitle?: string): SEOData;

/**
 * Get current business status (open/closed)
 * @returns Business status with user-friendly message
 */
export function getCurrentBusinessStatus(): BusinessStatus;
```

### Deployment Workflow

#### Environment Configuration
Standardize environment setup:

```bash
# .env.example
VITE_SITE_URL=https://yourbusiness.com
VITE_GOOGLE_ANALYTICS_ID=GA_MEASUREMENT_ID
VITE_CONTACT_FORM_ENDPOINT=https://api.example.com/contact

# Development
VITE_NODE_ENV=development
VITE_DEBUG=true

# Production
VITE_NODE_ENV=production
VITE_DEBUG=false
```

#### Deployment Checklist
```markdown
## Pre-Deployment Checklist

### Code Quality
- [ ] All tests pass (`npm run test`)
- [ ] No linting errors (`npm run lint`)
- [ ] TypeScript compilation successful (`npm run typecheck`)
- [ ] Build completes without errors (`npm run build`)

### Business Data
- [ ] `businessInfo.ts` contains accurate business information
- [ ] Contact information is current and tested
- [ ] Business hours are accurate
- [ ] Social media links are valid
- [ ] Address and coordinates are correct

### SEO & Performance
- [ ] Meta tags are properly configured
- [ ] Schema markup is implemented
- [ ] Images are optimized and have alt text
- [ ] Lighthouse scores meet requirements (Performance ≥ 90, Accessibility ≥ 95, SEO ≥ 95)

### Accessibility
- [ ] Keyboard navigation works correctly
- [ ] Screen reader compatibility verified
- [ ] Color contrast meets WCAG AA standards
- [ ] Focus indicators are visible

### Cross-Browser Testing
- [ ] Chrome (latest)
- [ ] Firefox (latest)
- [ ] Safari (latest)
- [ ] Edge (latest)
- [ ] Mobile browsers (iOS Safari, Chrome Mobile)

### Content Review
- [ ] All placeholder content replaced with actual business content
- [ ] Spelling and grammar checked
- [ ] Brand voice consistency maintained
- [ ] Contact forms tested end-to-end
```

#### Continuous Integration
Configure automated checks:

```yaml
# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npm run typecheck
    
    - name: Run tests
      run: npm run test:coverage
    
    - name: Build project
      run: npm run build
    
    - name: Run accessibility tests
      run: npm run test:a11y
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
```

### Team Collaboration

#### Code Review Guidelines
```markdown
## Code Review Checklist

### Functionality
- [ ] Code solves the intended problem
- [ ] Edge cases are handled appropriately
- [ ] Error handling is implemented
- [ ] Business data is properly integrated

### Code Quality
- [ ] Code is readable and well-structured
- [ ] TypeScript types are properly defined
- [ ] No unused imports or variables
- [ ] Consistent naming conventions

### Business Requirements
- [ ] Uses business data from `businessInfo.ts`
- [ ] Follows brand guidelines and voice
- [ ] Meets accessibility requirements
- [ ] Responsive design implemented

### Testing
- [ ] Unit tests are included
- [ ] Tests cover edge cases
- [ ] Accessibility tests included
- [ ] Manual testing completed
```

#### Issue Templates
```markdown
## Bug Report

### Description
A clear description of what the bug is.

### Steps to Reproduce
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

### Expected Behavior
What you expected to happen.

### Actual Behavior
What actually happened.

### Screenshots
If applicable, add screenshots.

### Environment
- Browser: [e.g. Chrome 91]
- Device: [e.g. iPhone 12, Desktop]
- OS: [e.g. iOS 14.6, Windows 10]

### Business Context
- [ ] Affects business-critical functionality
- [ ] Impacts user conversion flow
- [ ] Accessibility issue
- [ ] SEO impact
```

## Quality Metrics
- PR approval rate after first review ≥ 80%
- Average PR review time ≤ 24 hours
- Build success rate ≥ 99%
- Documentation coverage for all public APIs
- Zero critical security vulnerabilities
- Deployment success rate ≥ 98%

## Integration Requirements
- Follow `testing-workflow.mdc` for test requirements
- Apply `business-context.mdc` for business-aware commits
- Use `content-seo.mdc` for documentation content
- Ensure `design-system-enforcement.mdc` compliance in PRs

