---
description: 
globs: 
alwaysApply: false
---
# Company Information Integration Rules

## Single Source of Truth Requirement
- ALL business information MUST come from `businessInfo.ts` *(auto-generated by the setup wizard or derived from **init-config.json** if provided)*
- NEVER hardcode business details in components
# Business Information Integration - MANDATORY

## Central Data Management - STRICTLY ENFORCE
- Import and use structured data from `businessInfo.ts`
- `businessInfo.ts` is generated by `npm run init` or by supplying an `init-config.json`; **do NOT** edit it manually.
- Update business information ONLY via the provided configuration file or setup wizard
- NEVER hardcode business details in components

## Required Import Pattern
```typescript
// ALWAYS import from businessInfo.ts
import { businessInfo, generateSEOData, getCurrentBusinessStatus, getGoogleMapsUrl } from '@data/businessInfo';

// NEVER hardcode business details
const businessName = "My Business"; // ❌ WRONG
const businessName = businessInfo.name; // ✅ CORRECT
```

## Core Data Usage Patterns

### Business Identity
```typescript
businessInfo.name                    // Full business name
businessInfo.tagline                 // Business tagline (optional)
businessInfo.description             // Full description
```

### Contact Information
```typescript
businessInfo.contact.phone           // Display phone number
businessInfo.contact.email           // Email address
businessInfo.address.full            // Complete address string
businessInfo.address.city            // City name for local SEO
```

### Business Operations
```typescript
// Business hours with status
const status = getCurrentBusinessStatus();
{status.isOpen ? (
  <span className={styles.open}>{status.message}</span>
) : (
  <span className={styles.closed}>{status.message}</span>
)}

// Individual hours display
{Object.entries(businessInfo.hours).map(([day, hours]) => (
  <div key={day}>
    <span>{day.charAt(0).toUpperCase() + day.slice(1)}:</span>
    <span>{hours}</span>
  </div>
))}
```

### Social Media Links (Optional)
```typescript
// Safe rendering for optional social links
{businessInfo.social?.facebook && (
  <a href={businessInfo.social.facebook} target="_blank" rel="noopener noreferrer">
    Facebook
  </a>
)}
```

## Component Integration Examples

### Business Header Pattern
```typescript
import { businessInfo, getCurrentBusinessStatus } from '@data/businessInfo';

const Header: React.FC = () => {
  const businessStatus = getCurrentBusinessStatus();

  return (
    <header>
      <h1>{businessInfo.name}</h1>
      {businessInfo.tagline && <p>{businessInfo.tagline}</p>}
      
      <div className={styles.businessStatus}>
        <span className={businessStatus.isOpen ? styles.open : styles.closed}>
          {businessStatus.message}
        </span>
      </div>
      
      <a href={`tel:${businessInfo.contact.phone}`}>
        {businessInfo.contact.phone}
      </a>
    </header>
  );
};
```

### Contact Section Pattern
```typescript
const ContactSection: React.FC = () => {
  return (
    <section>
      <h2>Contact {businessInfo.name}</h2>
      
      <div>
        <p>Phone: <a href={`tel:${businessInfo.contact.phone}`}>
          {businessInfo.contact.phone}
        </a></p>
        
        <p>Email: <a href={`mailto:${businessInfo.contact.email}`}>
          {businessInfo.contact.email}
        </a></p>
        
        <p>Address: {businessInfo.address.full}</p>
        
        <a 
          href={`https://maps.google.com/maps?q=${encodeURIComponent(businessInfo.address.full)}`}
          target="_blank" 
          rel="noopener noreferrer"
        >
          Get Directions
        </a>
      </div>

      <div>
        <h3>Hours</h3>
        {Object.entries(businessInfo.hours).map(([day, hours]) => (
          <div key={day}>
            <span>{day.charAt(0).toUpperCase() + day.slice(1)}:</span>
            <span>{hours}</span>
          </div>
        ))}
      </div>
    </section>
  );
};
```

### Business Footer Pattern
```typescript
const Footer: React.FC = () => {
  const currentYear = new Date().getFullYear();

  return (
    <footer>
      <div>
        <h3>{businessInfo.name}</h3>
        <p>{businessInfo.description}</p>
      </div>

      <div>
        <h4>Contact</h4>
        <p><a href={`tel:${businessInfo.contact.phone}`}>
          {businessInfo.contact.phone}
        </a></p>
        <p><a href={`mailto:${businessInfo.contact.email}`}>
          {businessInfo.contact.email}
        </a></p>
        <p>{businessInfo.address.full}</p>
      </div>

      {/* Optional social links */}
      {Object.keys(businessInfo.social || {}).length > 0 && (
        <div>
          <h4>Follow Us</h4>
          {businessInfo.social?.facebook && (
            <a href={businessInfo.social.facebook} target="_blank" rel="noopener noreferrer">
              Facebook
            </a>
          )}
          {businessInfo.social?.instagram && (
            <a href={businessInfo.social.instagram} target="_blank" rel="noopener noreferrer">
              Instagram
            </a>
          )}
        </div>
      )}

      <div>
        <p>© {currentYear} {businessInfo.name}. All rights reserved.</p>
      </div>
    </footer>
  );
};
```

## SEO Integration
```typescript
// Generate page-specific SEO data
const seoData = {
  title: `${businessInfo.name} - ${businessInfo.tagline || 'Professional Services'}`,
  description: `${businessInfo.description} Located in ${businessInfo.address.city}.`,
  keywords: `${businessInfo.name}, ${businessInfo.address.city}, business services`
};

// Use in meta tags
<title>{seoData.title}</title>
<meta name="description" content={seoData.description} />
<meta name="keywords" content={seoData.keywords} />
```

## Error Handling & Fallbacks
```typescript
// Always provide fallbacks for dynamic data
const businessStatus = getCurrentBusinessStatus() || {
  isOpen: false,
  message: 'Hours not available - please contact us'
};

// Safe property access for optional data
const displayName = businessInfo.name || 'Business Name';
const socialLinks = businessInfo.social || {};
```

## Validation Checklist
- [ ] All business data imports from `businessInfo.ts`
- [ ] No hardcoded business details in components
- [ ] Phone/email links work correctly
- [ ] Address displays properly
- [ ] Business hours show current status
- [ ] Social links render when available
- [ ] Error handling for missing data
- [ ] SEO data uses business information

## Path Alias Usage
```typescript
// ALWAYS use path aliases for imports
import { businessInfo } from '@data/businessInfo'; // ✅ CORRECT
import { Header } from '@components/Header/Header'; // ✅ CORRECT

// NEVER use relative paths for data imports
import { businessInfo } from '../../../data/businessInfo'; // ❌ WRONG
```

## Business-Agnostic Design Principles
- Template must work for ANY business type
- No hardcoded industry-specific terms
- Flexible data structure accommodates different business models
- Configurable features and services arrays
- Optional social media platforms
- Adaptable business hours format
- Generic contact methods support

**Remember: The businessInfo.ts file is the single source of truth for ALL business-related data. Any business information displayed on the website MUST come from this central configuration file.**